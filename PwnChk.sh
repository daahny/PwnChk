#!/bin/bash

##### PwnChk #####
###   Summary  ###
# This script is used to check the breach status for an email account.
# This is especially useful if you have multiple burner emails.
# Instead of checking the breach status of 200 different burner emails one at a time,
# this script can accept a CSV file of burner emails and check the breach status
# of each email using the Have I Been Pwned (HIBP) API.
# API key:  https://haveibeenpwned.com/API/Key
# API docs: https://haveibeenpwned.com/API/v3


###  Operation  ###
# This script first parses emails from a CSV file. This CSV file can be generated using
# Read_Emails.py (iCloud Hide My Email only) or through manual entry. 
# CSV format: service, email (e.g. Adobe, foo@adobe.com).
# Once the emails are parsed and placed into an array, the array is iterated over
# and each email is checked for a breach using cURL and the HIBP API.
# Then, final results are reported and the script exits.



URL='https://haveibeenpwned.com/api/v3'			# HIPB URL
IFS_OLD=$IFS						# To restore the IFS after script completes
ACCOUNTS='accounts.csv'					# CSV file storing account name and email (generated by Read_Emails.py)
declare -a emails					# Array of emails to be checked
breach_count=0						# Number of breaches detected
API_KEY=""						# HIBP API key

RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOL='\033[0m'



# Check for an API key and prompt for one if not found.
function get_key() {
	[[ -r "./api_key.txt" ]] && API_KEY=$(cat ./api_key.txt) && return
	printf "${RED}### api_key.txt file not found ###${NOCOL}\n"
	read -r -p "Please enter an HIBP API key or exit the script: " API_KEY
	
	printf "\nAuthenticating key...\n"
	response=$(curl -s -H "hibp-api-key:${API_KEY}" "${URL}/breachedaccount/foo@baz.com" | awk '{print $3}')
	[[ "$response" == "401," ]] && echo "Invalid key. Exiting script..." && exit 1
}



# Read emails to check from a CSV file (CSV file is obtained from Read_Emails.py).
function get_emails() {
	[[ ! -f "$ACCOUNTS" ]] && echo "ERROR: Accounts file not available. Exiting script..." && exit 2
	while IFS=, read account_name email || [ -n "$account_name" ]; do
	# 	Uncomment to see emails to be checked before querying the HIBP API
	#	printf "%-15s %-25s\n" "Account Name: " "$account_name"
	#	printf "%-15s %-25s\n" "Email: " "$email"
	#	printf "\n"
		emails+=("$email")
	done < $ACCOUNTS
}



# Use the HIPB API to check the pownage status of each email and report the results.
function check_pwnage() {
	for email in ${emails[@]}; do
		result=$(curl -s -H hibp-api-key:${API_KEY} "$(echo ${URL}/breachedaccount/${email} | sed 's/\r//g')")
		printf "%-10s %-15s\n" "Checking:" "$email" 
		if [[ -z "$result" ]]; then
			printf "%-10s ${GREEN}%-15s${NOCOL}\n" "Status:" "No breaches found."
		else
			printf "%-10s ${RED}%-15s${NOCOL}\n" "Status:" "One or more breaches found."
			echo "$result" | tr -d '[]{}"":' | sed 's/Name//g' | awk -F , '{ for (i = 1; i <= NF; i++ ) print "Site:      " $i }'
			breach_count=$((breach_count + 1))
		fi
		echo ""
		sleep 2
	done
}



# Report breach statistics/results.
function report_results() {
	echo "### Breach results ###"
	[[ "$breach_count" -eq 0 ]] && printf "${GREEN}No breaches found.${NOCOL}" && return
	[[ "$breach_count" -eq 1 ]] && printf "${RED}1 email has been breached.${NOCOL}\n" && return
	printf "${RED}${breach_count} emails have been breached.${NOCOL}\n"
}



# Main function.
function main() {
	get_key
	get_emails
	check_pwnage
	report_results
}



main
